@page "/upload"
@inject IVideoService videoService
@inject NavigationManager navigationManager

<Loading IsLoading="IsLoading" />

@if (ShowError)
{
    <div class="alert alert-danger" role="alert">
        @ErrorMsg
    </div>
}

<div class="row" style="margin-top:15px">
    <div class="col-md-6">
        <EditForm Model="@VM" OnSubmit=@FormSubmitted>
            <div class="form-group">
                <label for="Name">Name</label>
                <InputText @bind-Value=VM.Name class="form-control" id="Name" />
            </div>
            <div class="form-group">
                <label for="Description">Description</label>
                <InputTextArea @bind-Value=VM.Description class="form-control" id="Description" />
            </div>
            <br/>
            <div class="form-group">
                <InputFile id="inputFileBlazor" OnChange="ViewImage" />
            </div>
            <br />
            <input type="submit" class="btn btn-primary" value="Save" />
        </EditForm>        
    </div>
</div>

@code {

    private bool ShowError = false;
    private string ErrorMsg = string.Empty;

    private bool IsLoading = false;

    const int MaxFileSize = 50 * 1024 * 1024; // 50MB
    private IBrowserFile UploadedFile = null;

    public FileUploadViewModel VM = new();

    protected async Task ViewImage(InputFileChangeEventArgs e)
    {
        ShowError = false;
        ErrorMsg = string.Empty;

        if (e.File.Size > MaxFileSize)
        {
            ErrorMsg = $"The file size is {e.File.Size} bytes, this is more than the allowed limit of {MaxFileSize} bytes.";
            ShowError = true;
            return;
        }
        //else if (!e.File.ContentType.ToLower().Contains("pdf"))
        //{
        //    ShowError = true;
        //    ErrorMsg = "Unsupported file, only pdf are supported";
        //    return;
        //}

        try
        {
            //Loading = true;
            UploadedFile = e.File;
        }
        catch (Exception ex)
        {            
            ShowError = true;
            ErrorMsg = "Cannot upload the file to storage";
        }
        finally
        {
            //Loading = false;
        }

    }

    async Task FormSubmitted()
    {
        IsLoading = true;

        if (string.IsNullOrEmpty(VM.Name)) 
        {
            ShowError = true;
            ErrorMsg = "The name of the file cannot be empty";
            return;
        }

        if (string.IsNullOrEmpty(VM.Description)) 
        {
            ShowError = true;
            ErrorMsg = "The description cannot be empty";
            return;
        }

        if (UploadedFile == null)
        {
            ShowError = true;
            ErrorMsg = "No video uploaded";
            return;
        }

        using (var fileStream = UploadedFile.OpenReadStream(MaxFileSize))
        using (var memoryStream = new MemoryStream())
        {
            await fileStream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;
            await videoService.UploadVideoAsync(VM, UploadedFile.Name, memoryStream);            
            ShowError = false;
        }

        IsLoading = false;
        navigationManager.NavigateTo("/");
    }
}
