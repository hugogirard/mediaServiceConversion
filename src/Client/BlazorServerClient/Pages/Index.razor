@page "/"
@inject IVideoService videoService
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager


@if (VideoEncodingJobs != null) 
{
    <div class="row">
        <div class="col-md-1">
            <button class="btn btn-primary" @onclick="Refresh">REFRESH</button>
        </div>        
    </div>
    <div class=row style="margin-top:30px">
        <div class=col-md-12>
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th scope="col">Id</th>
                        <th scope="col">JobName</th>
                        <th scope="col">OutputAssetName</th>
                        <th scope="col">State</th>
                        <th></th>                        
                    </tr>
                </thead>
                <tbody>
                    @foreach (var job in VideoEncodingJobs)
                    {
                        <tr>
                            <td>@job.Id</td>
                            <td>@job.JobName</td>
                            <td>@job.OutputAssetName</td>
                            <td>@job.State</td>
                            <td>
                                <button class="btn btn-primary" @onclick="(() => OnPlayVideo(job))">
                                    PLAY
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {

    public IEnumerable<VideoEncodingJob> VideoEncodingJobs { get; set; }

    protected override async Task OnInitializedAsync()
    {
        VideoEncodingJobs = await videoService.GetJobs();
    }

    private async Task Refresh() 
    { 
        VideoEncodingJobs = await videoService.GetJobs();
    }

    private async Task OnPlayVideo(VideoEncodingJob videoEncodingJob)
    {
        //var vm = new PlayVideoViewModel
        //{
        //    Id = videoEncodingJob.Id,
        //    StreamingUrl = videoEncodingJob.StreamingLocationUrl[2]
        //};

        // Get the streaming without specific format
        //var streamingEndpoint = videoEncodingJob.StreamingLocationUrl.FirstOrDefault(s => !s.Contains("format"));

        //await LocalStorage.SetAsync(jsRuntime, "video", streamingEndpoint);
        
        navigationManager.NavigateTo($"{navigationManager.BaseUri}playvideo?id={videoEncodingJob.Id}", true);
    }
}